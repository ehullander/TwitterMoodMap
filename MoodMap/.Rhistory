}
})
output$gvis <- renderGvis({
gvisGeoChart(df(), "DMA", "scores", hovervar = "Region",
options=list(region=st(), displayMode="regions",
resolution="metros",
colorAxis="{minValue:'-1.5', maxValue:'1.5'}",
displayMode = 'markers',
colors="['#0033CC','#999999','#FFFF00']"))
})
output$table <- renderDataTable(df())
}
shinyApp(ui = ui, server = server)
library(shiny)
require("googleVis")
DF <- read.csv("tweetscores.csv", colClasses = "character")
DF<-DF[DF$X!="",]
DF$date<-factor(DF$date)
DF$count<-as.double(DF$count)
DF$scores<-as.double(DF$scores)
DF$sd<-as.double(DF$sd)
dates<-unique(as.character(DF$date))
#week<-weekdays(as.Date(dates))
ui <- fluidPage(
mainPanel(
htmlOutput("gvis"),
sliderInput(inputId = "when",
label= "Date:",
value=1,
min=1,
max=length(dates),
animate=TRUE,
step=1),
numericInput(inputId = "qty",
label="MinTweets",
value=300),
textInput(inputId = "DMA",
label="DMA Region",
value=""),
dataTableOutput('table')
)
)
server <- function(input, output) {
df<- reactive({
if(input$DMA!="")
{
df<-subset(DF,date==dates[input$when] & as.numeric(count)>input$qty & DMA==input$DMA)
}
else
{
df<- subset(DF,date==dates[input$when] & as.numeric(count)>input$qty)
}
})
st<- reactive({
if(input$DMA!="")
{
#st<-paste("US-",input$DMA, sep="")
st<- "US"
}
else
{
st<- "US"
}
})
output$gvis <- renderGvis({
gvisGeoChart(df(), "DMA", "scores", hovervar = "Region",
options=list(region=st(), displayMode="regions",
resolution="metros",
colorAxis="{minValue:'-1.5', maxValue:'1.5'}",
displayMode = 'markers',
colors="['#0033CC','#999999','#FFFF00']"))
})
output$table <- renderDataTable(df())
}
shinyApp(ui = ui, server = server)
library(shiny)
require("googleVis")
DF <- read.csv("tweetscores.csv", colClasses = "character")
DF<-DF[DF$X!="",]
DF$date<-factor(DF$date)
DF$count<-as.double(DF$count)
DF$scores<-as.double(DF$scores)
DF$sd<-as.double(DF$sd)
dates<-unique(as.character(DF$date))
#week<-weekdays(as.Date(dates))
ui <- fluidPage(
mainPanel(
htmlOutput("gvis"),
sliderInput(inputId = "when",
label= "Date:",
value=1,
min=1,
max=length(dates),
animate=TRUE,
step=1),
numericInput(inputId = "qty",
label="MinTweets",
value=300),
textInput(inputId = "DMA",
label="DMA Region",
value=""),
dataTableOutput('table')
)
)
server <- function(input, output) {
df<- reactive({
if(input$DMA!="")
{
df<-subset(DF,date==dates[input$when] & as.numeric(count)>input$qty & DMA==input$DMA)
}
else
{
df<- subset(DF,date==dates[input$when] & as.numeric(count)>input$qty)
}
})
st<- reactive({
if(input$DMA!="")
{
#st<-paste("US-",input$DMA, sep="")
st<- "US"
}
else
{
st<- "US"
}
})
output$gvis <- renderGvis({
gvisGeoChart(df(), "DMA", "scores", hovervar = "Region",
options=list(region=st(), displayMode="markers",
resolution="metros",
colorAxis="{minValue:'-1.5', maxValue:'1.5'}",
colors="['#0033CC','#999999','#FFFF00']"))
})
output$table <- renderDataTable(df())
}
shinyApp(ui = ui, server = server)
library(shiny)
require("googleVis")
DF <- read.csv("tweetscores.csv", colClasses = "character")
DF<-DF[DF$X!="",]
DF$date<-factor(DF$date)
DF$count<-as.double(DF$count)
DF$scores<-as.double(DF$scores)
DF$sd<-as.double(DF$sd)
dates<-unique(as.character(DF$date))
#week<-weekdays(as.Date(dates))
ui <- fluidPage(
mainPanel(
htmlOutput("gvis"),
sliderInput(inputId = "when",
label= "Date:",
value=1,
min=1,
max=length(dates),
animate=TRUE,
step=1),
numericInput(inputId = "qty",
label="MinTweets",
value=300),
textInput(inputId = "DMA",
label="DMA Region",
value=""),
dataTableOutput('table')
)
)
server <- function(input, output) {
df<- reactive({
if(input$DMA!="")
{
df<-subset(DF,date==dates[input$when] & as.numeric(count)>input$qty & DMA==input$DMA)
}
else
{
df<- subset(DF,date==dates[input$when] & as.numeric(count)>input$qty)
}
})
st<- reactive({
if(input$DMA!="")
{
#st<-paste("US-",input$DMA, sep="")
st<- "US"
}
else
{
st<- "US"
}
})
output$gvis <- renderGvis({
gvisGeoChart(df(), "DMA", "scores", hovervar = "Region",
options=list(region=st(), displayMode="markers",
resolution="nation",
colorAxis="{minValue:'-1.5', maxValue:'1.5'}",
colors="['#0033CC','#999999','#FFFF00']"))
})
output$table <- renderDataTable(df())
}
shinyApp(ui = ui, server = server)
demo(googleVis)
setwd("C:/Users/Eric/Desktop/Learning/Python/Twitterstream/Twitterstream")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
require('RJSONIO')
require("googleVis")
#Reads JSON data and Dictionary files
filename<-"output17.txt"
f=file(filename)
date<-file.mtime(filename)
statedata <- read.csv("statepopDMA.csv", colClasses = "character")
AFINN <- read.table("AFINN-111.txt", header=FALSE, sep="\t",  quote='', comment='',colClasses = c("character", "numeric"))
AFINN[,2]<-as.integer(AFINN[,2])
tweets<-data.frame()
linn<-readLines(f)
JSON<-0
j=0
L=length(linn)
for (i in 1:L)
{
if (isValidJSON(I(linn[i]))==TRUE)
{
j=j+1
JSON<-fromJSON(linn[i])
if(!is.null(JSON$text)&!is.null(JSON$place$full_name))
{
tweets[j,1]<-JSON$text
tweets[j,2]<-JSON$place$full_name
}
}
}
close(f)
#Tokenizes a string of text
#merges with the sentiment dictionary AFINN
#Sums the sentiment of the text, and returns
sentiment<-function(text)
{
s<-data.frame(strsplit(text," "))
x<-merge(s, AFINN, by.x=names(s),by.y='V1', all.x=FALSE)
sum(x$V2, na.rm=TRUE)
}
tweets$scores<-vapply(tweets[,'V1'],sentiment, FUN.VALUE=integer(1))
tweets<-merge(statedata,tweets,by.x='CityState', by.y='V2')
DMAs<-unique(data.frame(Region=statedata$DMA.Region,DMA=as.numeric(statedata$DMA.Region.Code)))
tweets$ones<-1
df<-with(tweets, tapply(scores, DMA.Region.Code, mean, na.rm=TRUE, row.names=NULL, simplify=FALSE))
dt<-with(tweets, tapply(scores, DMA.Region.Code, sd, na.rm=TRUE,  simplify=FALSE))
dx<-with(tweets, tapply(ones, DMA.Region.Code, sum, na.rm=TRUE,  simplify=FALSE))
df<-data.frame(DMA=as.numeric(row.names(df)),scores=as.numeric(df), sd=as.numeric(dt), count=as.numeric(dx))
df<-merge(df,DMAs,by.x='DMA',by.y='DMA')
maxscore<-max(df$scores)
df$scores<-round(df$scores,2)
df$sd<-round(df$sd,2)
#df<-rbind(c(1000,-3),df)
#df<-rbind(c(1000,3),df)
df<-cbind(df,date)
write.table(df,"tweetscores2.csv", append=TRUE, sep=",", col.names=NA)
#Google Intensity plot
Intensity1 <- gvisGeoChart(df, "DMA", "scores", hovervar = "Region",
options=list(region="US", displayMode="regions",
resolution="metros", colors="['#0033CC','#999999','#FFFF00']"))
plot(Intensity1)
Intensity2 <- gvisGeoChart(df, "DMA", "count", hovervar = "Region",
options=list(region="US", displayMode="regions",
resolution="metros", colors="['#FFFFFF','#000000']"))
plot(Intensity2)
library(shiny)
require("googleVis")
DF <- read.csv("tweetscores.csv", colClasses = "character")
DF<-DF[DF$X!="",]
DF$date<-factor(DF$date)
DF$count<-as.double(DF$count)
DF$scores<-as.double(DF$scores)
DF$sd<-as.double(DF$sd)
dates<-unique(as.character(DF$date))
#week<-weekdays(as.Date(dates))
ui <- fluidPage(
mainPanel(
htmlOutput("gvis"),
sliderInput(inputId = "when",
label= "Date:",
value=1,
min=1,
max=length(dates),
animate=TRUE,
step=1),
numericInput(inputId = "qty",
label="MinTweets",
value=300),
textInput(inputId = "DMA",
label="DMA Region",
value=""),
dataTableOutput('table')
)
)
server <- function(input, output) {
df<- reactive({
if(input$DMA!="")
{
df<-subset(DF,date==dates[input$when] & as.numeric(count)>input$qty & DMA==input$DMA)
}
else
{
df<- subset(DF,date==dates[input$when] & as.numeric(count)>input$qty)
}
})
st<- reactive({
if(input$DMA!="")
{
#st<-paste("US-",input$DMA, sep="")
st<- "US"
}
else
{
st<- "US"
}
})
output$gvis <- renderGvis({
gvisGeoChart(df(), "DMA", "scores", hovervar = "Region",
options=list(region=st(), displayMode="regions",
resolution="metros",
colorAxis="{minValue:'-1.5', maxValue:'1.5'}",
colors="['#0033CC','#999999','#FFFF00']"))
})
output$table <- renderDataTable(df())
}
shinyApp(ui = ui, server = server)
setwd("C:/Users/Eric/Desktop/Learning/Python/Twitterstream/Twitterstream/MoodMap")
library(shiny)
require("googleVis")
DF <- read.csv("tweetscores.csv", colClasses = "character")
DF<-DF[DF$X!="",]
DF$date<-factor(DF$date)
DF$count<-as.double(DF$count)
DF$scores<-as.double(DF$scores)
DF$sd<-as.double(DF$sd)
dates<-unique(as.character(DF$date))
#week<-weekdays(as.Date(dates))
ui <- fluidPage(
mainPanel(
htmlOutput("gvis"),
sliderInput(inputId = "when",
label= "Date:",
value=1,
min=1,
max=length(dates),
animate=TRUE,
step=1),
numericInput(inputId = "qty",
label="MinTweets",
value=300),
textInput(inputId = "DMA",
label="DMA Region",
value=""),
dataTableOutput('table')
)
)
server <- function(input, output) {
df<- reactive({
if(input$DMA!="")
{
df<-subset(DF,date==dates[input$when] & as.numeric(count)>input$qty & DMA==input$DMA)
}
else
{
df<- subset(DF,date==dates[input$when] & as.numeric(count)>input$qty)
}
})
st<- reactive({
if(input$DMA!="")
{
#st<-paste("US-",input$DMA, sep="")
st<- "US"
}
else
{
st<- "US"
}
})
output$gvis <- renderGvis({
gvisGeoChart(df(), "DMA", "scores", hovervar = "Region",
options=list(region=st(), displayMode="regions",
resolution="metros",
colorAxis="{minValue:'-1.5', maxValue:'1.5'}",
colors="['#0033CC','#999999','#FFFF00']"))
})
output$table <- renderDataTable(df())
}
shinyApp(ui = ui, server = server)
library(shiny)
require("googleVis")
DF <- read.csv("tweetscores.csv", colClasses = "character")
DF<-DF[DF$X!="",]
DF$date<-factor(DF$date)
DF$count<-as.double(DF$count)
DF$scores<-as.double(DF$scores)
DF$sd<-as.double(DF$sd)
dates<-unique(as.character(DF$date))
#week<-weekdays(as.Date(dates))
ui <- fluidPage(
mainPanel(
htmlOutput("gvis"),
sliderInput(inputId = "when",
label= "Date:",
value=1,
min=1,
max=length(dates),
animate=TRUE,
step=1),
numericInput(inputId = "qty",
label="MinTweets",
value=300),
textInput(inputId = "DMA",
label="DMA Region",
value=""),
dataTableOutput('table')
)
)
server <- function(input, output) {
df<- reactive({
if(input$DMA!="")
{
df<-subset(DF,date==dates[input$when] & as.numeric(count)>input$qty & DMA==input$DMA)
}
else
{
df<- subset(DF,date==dates[input$when] & as.numeric(count)>input$qty)
}
})
st<- reactive({
if(input$DMA!="")
{
#st<-paste("US-",input$DMA, sep="")
st<- "US"
}
else
{
st<- "US"
}
})
output$gvis <- renderGvis({
gvisGeoChart(df(), "DMA", "scores", hovervar = "Region",
options=list(region=st(), displayMode="regions",
resolution="metros",
colorAxis="{minValue:'-1.5', maxValue:'1.5'}",
colors="['#0033CC','#999999','#FFFF00']"))
})
output$table <- renderDataTable(df())
}
shinyApp(ui = ui, server = server)
library(shiny)
require("googleVis")
DF <- read.csv("tweetscores.csv", colClasses = "character")
DF<-DF[DF$X!="",]
DF$date<-factor(DF$date)
DF$count<-as.double(DF$count)
DF$scores<-as.double(DF$scores)
DF$sd<-as.double(DF$sd)
dates<-unique(as.character(DF$date))
#week<-weekdays(as.Date(dates))
ui <- fluidPage(
mainPanel(
htmlOutput("gvis"),
sliderInput(inputId = "when",
label= "Date:",
value=1,
min=1,
max=length(dates),
animate=TRUE,
step=1),
numericInput(inputId = "qty",
label="MinTweets",
value=300),
textInput(inputId = "DMA",
label="DMA Region",
value=""),
dataTableOutput('table')
)
)
server <- function(input, output) {
df<- reactive({
if(input$DMA!="")
{
df<-subset(DF,date==dates[input$when] & as.numeric(count)>input$qty & DMA==input$DMA)
}
else
{
df<- subset(DF,date==dates[input$when] & as.numeric(count)>input$qty)
}
})
st<- reactive({
if(input$DMA!="")
{
#st<-paste("US-",input$DMA, sep="")
st<- "US"
}
else
{
st<- "US"
}
})
output$gvis <- renderGvis({
gvisGeoChart(df(), "DMA", "scores", hovervar = "Region",
options=list(region=st(), displayMode="regions",
resolution="metros",
colorAxis="{minValue:'-1.5', maxValue:'1.5'}",
colors="['#0033CC','#999999','#FFFF00']"))
})
output$table <- renderDataTable(df())
}
shinyApp(ui = ui, server = server)
shinyapps::deployApp('C:\Users\Eric\Desktop\Learning\Python\Twitterstream\Twitterstream\MoodMap')
shinyapps::deployApp('Users\Eric\Desktop\Learning\Python\Twitterstream\Twitterstream\MoodMap')
shinyapps::deployApp('MoodMap')
shinyapps::deployApp()
